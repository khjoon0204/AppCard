//
//  MainViewControllerTests.swift
//  AppCard
//
//  Created by Raymond Law on 10/31/15.
//  Copyright (c) 2015 Raymond Law. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//
@testable import AppCard
import XCTest

class MainViewControllerTests: XCTestCase
{
    // MARK: - Subject under test
    
    var sut: MainViewController!
    var window: UIWindow!
    
    // MARK: - Test lifecycle
    
    override func setUp()
    {
        super.setUp()
        window = UIWindow()
        setupMainViewController()
    }
    
    override func tearDown()
    {
        window = nil
        super.tearDown()
    }
    
    // MARK: - Test setup
    
    func setupMainViewController()
    {
        let storyboard = UIStoryboard(name: "Main", bundle: Bundle(for: type(of: self)))
        sut = storyboard.instantiateViewController(withIdentifier: "MainViewController") as? MainViewController
        sut.loadViewIfNeeded()
    }
    
    func loadView()
    {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: - Test doubles
    
    class MainBusinessLogicSpy: MainBusinessLogic
    {
        
        var list: Main.List?
        
        // MARK: Method call expectations
        
        var getListCalled = false
        
        // MARK: Spied methods
        
        func getList()
        {
            getListCalled = true
        }
        
        func _list() -> Main.List? {
            return self.list
        }
        
    }
    
    class TableViewSpy: UITableView
    {
        // MARK: Method call expectations
        
        var reloadDataCalled = false
        
        // MARK: Spied methods
        
        override func reloadData()
        {
            reloadDataCalled = true
        }
    }
    
    // MARK: - Tests
    
    func testShouldFetchOrdersWhenViewDidAppear()
    {
        // Given
        let mainBusinessLogicSpy = MainBusinessLogicSpy()
        sut.interactor = mainBusinessLogicSpy
        loadView()
        
        // When
//        sut.viewDidAppear(true)
        sut.viewDidLoad()
        
        // Then
        XCTAssert(mainBusinessLogicSpy.getListCalled, "view viewDidLoad 후에 getList 요청")
    }
    
    func testShouldDisplayGetList()
    {
        // Given
        let tableViewSpy = TableViewSpy()
        sut.tableView = tableViewSpy
        
        // When
        let viewModel = Main.GetList.ViewModel(list: Seeds.GetList.mock)
        sut.displayGetList(viewModel: viewModel)
        
        // Then
        XCTAssert(tableViewSpy.reloadDataCalled, "Displaying된 get list는 table view를 reload해야한다")
    }
    
    func testNumberOfSectionsInTableViewShouldAlwaysBeOne()
    {
        // Given
        let tableView = sut.tableView
        let list = Seeds.GetList.mock
        
        // When
        sut.displayGetList(viewModel: Main.GetList.ViewModel(list: list))
        let numberOfRows = sut.tableView(tableView!, numberOfRowsInSection: 0)
        
        // Then
        XCTAssertEqual(numberOfRows, 46, "table view rows 숫자는 46이어야 한다")
        
    }
    
    func testNumberOfRowsInAnySectionShouldEqaulNumberOfOrdersToDisplay()
    {
        // Given
        let tableView = sut.tableView
        sut.list = Seeds.GetList.mock
        
        // When
        let numberOfRows = sut.tableView(tableView!, numberOfRowsInSection: 0)
        
        // Then
        XCTAssertEqual(numberOfRows, sut.list.count, "table view rows 숫자는 보여진 get list 숫자와 동일해아한다")
        
    }
    
//    func testShouldConfigureTableViewCellToDisplayOrder()
//    {
//        // Given
//        let tableView = sut.tableView
//        let list = Seeds.GetList.mock
//
//        // When
//        sut.displayGetList(viewModel: Main.GetList.ViewModel(list: list))
//        let indexPath1 = IndexPath(row: 1, section: 0)
//        let cell1: MainListCell = sut.tableView(tableView!, cellForRowAt: indexPath1) as! MainListCell
//
//        // Then
//
//        XCTAssertEqual(cell1.mainTitle.text, "신상이에요", "정확한A properly configured table view cell should display the order date")
//        XCTAssertEqual(cell1.subTitle.text, "쏘카가 필요한 모든 순간\n쏘카 카드", "A properly configured table view cell should display the order total")
//    }
}
