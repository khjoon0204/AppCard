//
//  MainModels.swift
//  AppCard
//
//  Created by N17430 on 2021/02/03.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

enum Main
{
    
    // MARK: Use cases
    
    enum GetList
    {
        struct Response
        {
            var list: List
        }
        struct ViewModel
        {
            var list: List
        }
    }
}

extension Main{
    class List: NSObject{
        var list: [ListElement] = []
        var count: Int{
            return self.list.count
        }
        var imageDownloadCompletion: ((Main.List?) -> Void)?
        
        // MARK: - ListElement
        struct ListElement {
            var category : CategoryType?
            var displayType: DisplayType?
            var updateDate, openDate, closeDate, expireDate, dDayDate, corpName: String?
            var display: Display?
        }
        
        // MARK: - Display
        struct Display {
            var headerTitle, mainTitle, subTitle, backImg: String?
            var labelImg, centerImg: String?
            var mainColor, fontColor: String?
            var labelText, iconImg, size, title: String?
            var rightImg: String?
            var backImgData, labelImgData, centerImgData, iconImgData, rightImgData: Data?
        }
        
        enum CategoryType: String {
            case coupon = "coupon"
            case feature = "feature"
            case news = "news"
            case noti = "noti"
            case shop = "shop"
        }
                
        enum DisplayType: String {
            case displayTypeDefault = "default"
            case noBack = "noBack"
            case none = "none"
        }
        
        internal convenience init(list: [Main.List.ListElement] = [], imageDownloadCompletion: ((Main.List?) -> Void)? = nil, objs: [AnyObject] = []) {
            self.init()
            self.imageDownloadCompletion = imageDownloadCompletion
            var eles: [ListElement] = []
            for idx in 0..<objs.count{
                let i = objs[idx]
                var ele = ListElement()
                if let val = i["category"] as? String{ ele.category = CategoryType(rawValue: val) }
                if let val = i["displayType"] as? String{ ele.displayType = DisplayType(rawValue: val) }
                if let val = i["updateDate"] as? String{ ele.updateDate = val }
                if let val = i["openDate"] as? String{ ele.openDate = val }
                if let val = i["closeDate"] as? String{ ele.closeDate = val }
                if let val = i["expireDate"] as? String{ ele.expireDate = val }
                if let val = i["dDayDate"] as? String{ ele.dDayDate = val }
                if let val = i["corpName"] as? String{ ele.corpName = val }
                if let d = i["display"] as? [String:AnyObject]{
                    ele.display = Display()
                    if let val = d["headerTitle"] as? String{ ele.display?.headerTitle = val }
                    if let val = d["mainTitle"] as? String{ ele.display?.mainTitle = val }
                    if let val = d["subTitle"] as? String{ ele.display?.subTitle = val }
                    if let val = d["mainColor"] as? String{ ele.display?.mainColor = val }
                    if let val = d["fontColor"] as? String{ ele.display?.fontColor = val }
                    if let val = d["labelText"] as? String{ ele.display?.labelText = val }
                    if let val = d["size"] as? String{ ele.display?.size = val }
                    if let val = d["title"] as? String{ ele.display?.title = val }
                    if let val = d["iconImg"] as? String{
                        ele.display?.iconImg = val
                        FBStorage.imageData(fileName: val, getData: {
                            ele.display?.iconImgData = $0
                        })
                    }
                    if let val = d["backImg"] as? String{
                        ele.display?.backImg = val
                        FBStorage.imageData(fileName: val, getData: { data in
                            self.update(indexOf: idx) { (obj) in
                                obj.display?.backImgData = data
                            }
//                            print("idx=\(idx) backImgData Set! fileName=\(val) getData=\(data) setData=\(ele.display?.rightImgData?.count)")
                            self.imageDownloadCompleteCancelingPrevious()
                        })
                    }
                    if let val = d["labelImg"] as? String{
                        ele.display?.labelImg = val
                        FBStorage.imageData(fileName: val, getData: { data in
                            self.update(indexOf: idx) { (obj) in
                                obj.display?.labelImgData = data
                            }
//                            print("idx=\(idx) labelImgData Set! fileName=\(val) getData=\(data) setData=\(ele.display?.rightImgData?.count)")
                            self.imageDownloadCompleteCancelingPrevious()
                        })
                    }
                    if let val = d["centerImg"] as? String{
                        ele.display?.centerImg = val
                        FBStorage.imageData(fileName: val, getData: { data in
                            self.update(indexOf: idx) { (obj) in
                                obj.display?.centerImgData = data
                            }
//                            print("idx=\(idx) centerImgData Set! fileName=\(val) getData=\(data) setData=\(ele.display?.rightImgData?.count)")
                            self.imageDownloadCompleteCancelingPrevious()
                        })
                    }
                    if let val = d["rightImg"] as? String{
                        ele.display?.rightImg = val
                        FBStorage.imageData(fileName: val, getData: { data in                            
                            self.update(indexOf: idx) { (obj) in
                                obj.display?.rightImgData = data
                            }
//                            print("idx=\(idx) rightImgData Set! fileName=\(val) getData=\(data) setData=\(ele.display?.rightImgData?.count)")
                            self.imageDownloadCompleteCancelingPrevious()
                        })
                    }
                }
                if ele.displayType == nil{continue}
                eles.append(ele)
            }
            self.list = eles
        }
        
        private func imageDownloadCompleteCancelingPrevious(){
            NSObject.cancelPreviousPerformRequests(withTarget: self, selector: #selector(imageDownloadComplete), object: nil)
            self.perform(#selector(imageDownloadComplete), with: nil, afterDelay: 0.5)
        }
        
        @objc private func imageDownloadComplete(){
            self.imageDownloadCompletion?(self)
        }
        
        func append(contensOf list: Main.List){
            self.list.append(contentsOf: list.list)
        }
                
        func insertOnce(element: Main.List.ListElement, at: Int){
            guard let first = self.list.first, first.category! != .noti else {return}
            self.list.insert(element, at: at)
        }
        
        func object(indexOf idx: Int) -> ListElement?{
            guard idx < list.count else { print("index에 해당하는 element가 없습니다 index=\(idx)"); return nil }
            return self.list[idx]
        }
        
        func update(indexOf idx: Int, block:((inout ListElement)->Void)){
            block(&self.list[idx])
        }
        
    }
}
